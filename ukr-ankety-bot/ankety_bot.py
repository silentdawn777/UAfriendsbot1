import logging
from datetime import datetime, timedelta

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# üîë –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞
BOT_TOKEN = "8452151174:AAFPlZ7WXaUMoefoSzHru1SVShHJ_TwTdwc"  # —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 869393770  # —Ç–≤—ñ–π ID
COOLDOWN_MINUTES = 5

# üì¶ –ü–∞–º'—è—Ç—å —É –ø—Ä–æ—Ü–µ—Å—ñ
user_last_message = {}        # {user_id: datetime} ‚Äî –¥–ª—è –∫–æ–ª–¥–∞—É–Ω–∞
blocked_users = set()         # {"@username"} ‚Äî –∑–∞–≤–∂–¥–∏ –∑ @ —ñ –≤ lowercase
admins = {ADMIN_ID}
cooldown_bypass_once = set()  # {user_id} ‚Äî –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø—Ä–æ–ø—É—Å–∫ –ø—ñ—Å–ª—è "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É"

# üìù –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# üß© –ü—Ä–∏–∫–ª–∞–¥ –∞–Ω–∫–µ—Ç–∏
EXAMPLE_ANKETA = """–ü—Ä–∏–∫–ª–∞–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∞–Ω–∫–µ—Ç–∏:

–Ü–º'—è:
–í—ñ–∫:
–ú—ñ—Å—Ç–æ:
–Ü–Ω—Ç–µ—Ä–µ—Å–∏:
–ü—Ä–æ —Å–µ–±–µ:
–¢–µ–ª–µ–≥—Ä–∞–º: @—Å–≤—ñ–π–Æ–∑–µ—Ä–Ω–µ–π–º"""

# ====== –•–ï–ù–î–õ–ï–†–ò –ö–û–ú–ê–ù–î –¢–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [
        [KeyboardButton("–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É")],
        [KeyboardButton("–ß–æ–º—É –º–æ—é –∞–Ω–∫–µ—Ç—É –Ω–µ –≤–∏–∫–ª–∞–ª–∏?")],
        [KeyboardButton("–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_html(
        rf"–ü—Ä–∏–≤—ñ—Ç, <b>{user.first_name or '–¥—Ä—É–∂–µ'}</b>! ‚ù§Ô∏è –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –∫–∞–Ω–∞–ª—É "
        "¬´–®—É–∫–∞—é —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç –¥—Ä—É–≥–∞/–ø–æ–¥—Ä—É–≥—É¬ª. –¢—É—Ç —Ç–∏ —à–≤–∏–¥–∫–æ —Å—Ç–≤–æ—Ä–∏—à –∞–Ω–∫–µ—Ç—É –π –æ–ø–∏–Ω–∏—à—Å—è –≤ –Ω–∞—à—ñ–π –¥—Ä—É–∂–Ω—ñ–π —Å–ø—ñ–ª—å–Ω–æ—Ç—ñ! ‚ú®\n\n"
        "–ù–∞—Ç–∏—Å–∫–∞–π ¬´–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É¬ª, –∑–∞–ø–æ–≤–Ω—é–π –ø—Ä–∏–∫–ª–∞–¥ —ñ –≤—ñ–¥–ø—Ä–∞–≤–ª—è–π –º–µ–Ω—ñ. –Ø –≤—Å–µ –∞–∫—É—Ä–∞—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–º –∞–¥–º—ñ–Ω—É.üòä",
        reply_markup=reply_markup
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    text = (update.message.text or "").strip()

    # üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if user.username:
        uname = f"@{user.username.lower()}"
        if uname in blocked_users:
            await update.message.reply_text("–ù–∞ –∂–∞–ª—å, –¥–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –Ø–∫—â–æ —Ü–µ –ø–æ–º–∏–ª–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—ó. üôè")
            return

    # üü° –ö–Ω–æ–ø–∫–∏ ‚Äî –±–µ–∑ –∫–æ–ª–¥–∞—É–Ω–∞ —ñ –±–µ–∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É
    if text == "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É":
        await update.message.reply_text(EXAMPLE_ANKETA)
        await update.message.reply_text(
            "–ú–æ–∂–µ—à —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏—â–µ, –∑–∞–ø–æ–≤–Ω–∏ —Å–≤–æ—ó–º–∏ –¥–∞–Ω–∏–º–∏ —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ - —è –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–º –∞–¥–º—ñ–Ω—É."
        )
        cooldown_bypass_once.add(user_id)
        return

    if text == "–ß–æ–º—É –º–æ—é –∞–Ω–∫–µ—Ç—É –Ω–µ –≤–∏–∫–ª–∞–ª–∏?":
        await update.message.reply_text(
            "–£—Å—ñ –ø—Ä–∏—á–∏–Ω–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∏ –æ–ø–∏—Å–∞–Ω—ñ —Ç—É—Ç: https://uafriends.netlify.app/ üìö\n"
            "–Ø–∫—â–æ —â–æ—Å—å –Ω–µ —è—Å–Ω–æ ‚Äî –Ω–∞—Ç–∏—Å–Ω–∏ ¬´–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é¬ª üí¨"
        )
        return

    if text == "–ó–≤‚Äô—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ü—ñ—î—é":
        await update.message.reply_text(
            "–Ñ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ —ñ–¥–µ—ó? –ü–∏—à–∏ —Å—é–¥–∏ üëâ @Pidtrimkaanket_bot üíå\n"
            "–ú–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É —ñ –∑–∞–≤–∂–¥–∏ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏! ‚ú®"
        )
        return

    # ‚è± –ö–æ–ª–¥–∞—É–Ω –∑–∞—Å—Ç–æ—Å–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–æ ¬´–∑–≤–∏—á–∞–π–Ω–∏—Ö¬ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–∞–Ω–∫–µ—Ç)
    now = datetime.now()
    if user_id not in cooldown_bypass_once:
        last = user_last_message.get(user_id)
        if last:
            elapsed = now - last
            if elapsed < timedelta(minutes=COOLDOWN_MINUTES):
                remaining = timedelta(minutes=COOLDOWN_MINUTES) - elapsed
                minutes = max(1, int(remaining.total_seconds() // 60))  # –ø–æ–∫–∞–∑–∞—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 1 —Ö–≤
                await update.message.reply_text(
                    f"–¢—Ä—ñ—à–∫–∏ –ø–µ—Ä–µ–ø–æ—á–∏–Ω–µ–º–æ, —â–æ–± –Ω–µ –±—É–ª–æ —Å–ø–∞–º—É üòá "
                    f"–ú–æ–∂–µ—à –Ω–∞–ø–∏—Å–∞—Ç–∏ –∑–Ω–æ–≤—É —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω."
                )
                return
    else:
        # –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏–π –ø—Ä–æ–ø—É—Å–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ
        cooldown_bypass_once.discard(user_id)

    # üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–Ω–∫–µ—Ç—É –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=(
            f"–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞ –≤—ñ–¥ @{user.username or '–±–µ–∑_—é–∑–µ—Ä–Ω–µ–π–º—É'} (ID: {user_id}):\n\n{text}"
        )
    )
    await update.message.reply_text(
        "–î—è–∫—É—î–º–æ! üåü –ê–Ω–∫–µ—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–æ —ñ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é. "
        "–°–ª—ñ–¥–∫—É–π –∑–∞ –∫–∞–Ω–∞–ª–æ–º ‚Äî —Å–∫–æ—Ä–æ –ø–æ–±–∞—á–∏—à —Å–µ–±–µ —É –∫–∞–Ω–∞–ª—ñ! üíô"
    )

    # –æ–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ ¬´–∑–Ω–∞—á—É—â–æ–≥–æ¬ª –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    user_last_message[user_id] = now

# ====== –ê–î–ú–Ü–ù-–ö–û–ú–ê–ù–î–ò ======

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /addadmin <user_id>")
        return
    try:
        new_admin_id = int(context.args[0])
        admins.add(new_admin_id)
        await update.message.reply_text(f"–ê–¥–º—ñ–Ω–∞ –∑ ID {new_admin_id} –¥–æ–¥–∞–Ω–æ. ‚úÖ")
    except ValueError:
        await update.message.reply_text("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        return
    if not context.args:
        admin_list = "\n".join([f"- {admin_id}" for admin_id in admins])
        await update.message.reply_text(
            f"–ü–æ—Ç–æ—á–Ω—ñ –∞–¥–º—ñ–Ω–∏:\n{admin_list}\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /removeadmin <user_id>"
        )
        return
    try:
        admin_to_remove = int(context.args[0])
        if admin_to_remove == ADMIN_ID:
            await update.message.reply_text("–ù–µ–º–æ–∂–ª–∏–≤–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        elif admin_to_remove in admins:
            admins.remove(admin_to_remove)
            await update.message.reply_text(f"–ê–¥–º—ñ–Ω–∞ –∑ ID {admin_to_remove} –≤–∏–¥–∞–ª–µ–Ω–æ. üóëÔ∏è")
        else:
            await update.message.reply_text("–¶–µ–π ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–µ–¥ –∞–¥–º—ñ–Ω—ñ–≤.")
    except ValueError:
        await update.message.reply_text("ID –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")

async def block_user_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        return
    if not context.args:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /block @—é–∑–µ—Ä–Ω–µ–π–º")
        return
    username = context.args[0].lower()
    if not username.startswith('@'):
        username = f"@{username}"
    blocked_users.add(username)
    await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} –¥–æ–¥–∞–Ω–æ –¥–æ —á–æ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É. üö´")

async def unblock_user_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–¶—è –∫–æ–º–∞–Ω–¥–∞ –ª–∏—à–µ –¥–ª—è –≤–ª–∞—Å–Ω–∏–∫–∞ –±–æ—Ç–∞.")
        return
    if not context.args:
        if blocked_users:
            blocked_list = "\n".join([f"- {u}" for u in blocked_users])
            await update.message.reply_text(
                f"–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:\n{blocked_list}\n\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /unblock @—é–∑–µ—Ä–Ω–µ–π–º"
            )
        else:
            await update.message.reply_text("–ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π. ‚úÖ")
        return
    username = context.args[0].lower()
    if not username.startswith('@'):
        username = f"@{username}"
    if username in blocked_users:
        blocked_users.remove(username)
        await update.message.reply_text(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {username} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ. ‚úÖ")
    else:
        await update.message.reply_text("–¶—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —É —á–æ—Ä–Ω–æ–º—É —Å–ø–∏—Å–∫—É.")

# ====== –ó–ê–ü–£–°–ö ======

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("addadmin", add_admin))
    application.add_handler(CommandHandler("removeadmin", remove_admin))
    application.add_handler(CommandHandler("block", block_user_cmd))
    application.add_handler(CommandHandler("unblock", unblock_user_cmd))

    # –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == "__main__":
    main()
